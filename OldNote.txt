
(0..20).to_a().each() do |i|
    graffiti.createGlyph(i, $main_model.entities.add_group(), Geom::Transformation.translation(Geom::Point3d.new(i,0,0)))
end


After Kaley leaves we're going to try cleaning out the evaporator coils.
And I need to clean the mop and bucket out.

Tomorrow:
1) We'll go to Home Depot and pick up our order, then also buy some rubber grip pads and a bandsaw, and another towel rack for the 2nd floor.
   More specifically, we'll buy this bandsaw:

2) We come home and rinse out the shop-vac in the shower, then towel dry it with microfiber clothes.
3) We'll vacuum the upstairs area again, starting with the bathroom and ending with the foot of the stairs.
4) We'll swap to the water filter and mop the upstairs bathroom.
5) Check on the stairs, and continue our quest to clean up all the weird smells from it.
6) Switch to the cheap filter, and vacuum the second floor completely, along with the bathroom, and the evaporator.
7) Finish the 2nd floor bathroom.

=========================================

0.834 for the d4 edge
0.591 for the d6 edge

=========================================

Okay, so there's 3 ways I see that we can make the numbers:
- We paste an image in and emboss the image into the side of the die.
- We use a system font, and emboss the 3d text into the side of the die.
- Same as the last one, but we actually make numbers individually.









#=======================================================================================================================
herculanum = FontHolder.new("Herculanum", false, false, 0.75, 0.2, 
                            [[0,0], [0,-0.1], [-0.05,-0.05], [0,-0.11], [+0.03,-0.18]]                                                          //D4
                            [[0,0], [0,-0.1], [0,-0.1], [0,-0.15], [0,-0.12], [0,-0.18], [0,-0.1]]                                              //D6
                            [[0,0], [0,-0.1], [-0.03,-0.05], [0,-0.1], [0,-0.12], [0,-0.12], [0.02,-0.05], [0,0], [0,-0.075]]                   //D8
                            [[0,0], [0,-0.1], [-0.03,-0.05], [0,-0.1], [0,-0.12], [0,-0.12], [0.02,-0.05], [0,0], [0,-0.075], [0,0]]            //D10 TODO
                            [[0,0], [0,-0.1], [-0.03,-0.05], [0,-0.1], [0,-0.12], [0,-0.12], [0.02,-0.05], [0,0], [0,-0.075], [0,0]]            //D12 TODO
                            [[0,0], [0,-0.1], [-0.03,-0.05], [0,-0.1], [0,-0.12], [0,-0.12], [0.02,-0.05], [0,0], [0,-0.075], [0,0]]            //D20 TODO
                           )

    rotationTransform = Geom::Transformation.rotation(Geom::Point3d.new(offsetX, offsetY, 0), Z_AXIS, angle * Math::PI / 180.0)
    return axesTransform * rotationTransform

def createNumberDigits(numbers_group, face, number, offsetX, offsetY, angle, edgeIndex)
    digits = number.to_s().chars()
    if(digits.length() == 1)
        number_group = numbers_group.entities().add_group()
        number_entities = number_group.entities()
        index = digits[0].to_i()
        number_entities.add_3d_text(digits[0], TextAlignCenter, $currentFont.fontName, $currentFont.isBold, $currentFont.isItalic, $currentFont.letterHeight)
        number_bounds = number_group.bounds()
        number_entities.transform_entities(getLetterPlanePlace(face, (number_bounds.width / 2) + $fontOffsets[index][0] + offsetX, (number_bounds.height / 2) + $fontOffsets[index][1] + offsetY, angle, edgeIndex), number_entities.to_a())
    elsif(digits.length() == 2)
        number_group = numbers_group.entities().add_group()
        number_entities = number_group.entities()
        index = digits[0].to_i()
        number_entities.add_3d_text(digits[0], TextAlignCenter, $currentFont.fontName, $currentFont.isBold, $currentFont.isItalic, $currentFont.letterHeight)
        number_bounds = number_group.bounds()
        number_entities.transform_entities(getLetterPlanePlace(face, (number_bounds.width / 2) + $fontOffsets[index][0] + offsetX + $currentFont.doubleDigitOffset, (number_bounds.height / 2) + $fontOffsets[index][1] + offsetY, angle, edgeIndex), number_entities.to_a())

        number_group = numbers_group.entities().add_group()
        number_entities = number_group.entities()
        index = digits[1].to_i()
        number_entities.add_3d_text(digits[1], TextAlignCenter, $currentFont.fontName, $currentFont.isBold, $currentFont.isItalic, $currentFont.letterHeight)
        number_bounds = number_group.bounds()
        number_entities.transform_entities(getLetterPlanePlace(face, (number_bounds.width / 2) + $fontOffsets[index][0] + offsetX - $currentFont.doubleDigitOffset, (number_bounds.height / 2) + $fontOffsets[index][1] + offsetY, angle, edgeIndex), number_entities.to_a())
    else
        raise "Number has less than 1 or more than 2 characters are we can't handle that."
    end       
end



class D4
    def initialize()
        ...

        # Create the numbers to emboss on each face.
        numbers_group = model.active_entities.add_group()
        corner_numbers = [[1, 3, 2], [2, 3, 4], [4, 3, 1], [4, 1, 2]]
        [f1, f2, f3, f4].each_with_index do |face, index|
            3.times do |number_index|
                createNumberDigits(numbers_group, face, corner_numbers[index][number_index], 0, -0.5, 180, number_index)
            end
        end

        ...
    end
end

okay, so when I get home, first I'll check on the carpets, and start drying them if needed.
Then, I'll clean out the shop-vac in the garage, and once finished, I'll clean up the 3rd floor bathroom again, and the stairs.
I'll move the carpets back into the bathroom and blow-dry them to perfection.
After that we'll break open the AC unit, and we'll make a pass over it with the shop-vac to suck up as much crap as we can.
Then we'll take the blower port and use that to knock some crap off of the fins if possible.
We'll go at it with a brush to knock shit loose, while vacuuming of course.
Then one final pass of the blower and vacuum and we'll put it all back together and hopefully see some increased performance.
THE AIR CONDITIONER SHOULD BE OFF THE ENTIRE TIME!
If we finish all that in time, then we'll start on refurbishing the 2nd floor bathroom too!

class D12
    def initialize()
        model = Sketchup.active_model()
        model.start_operation('Create D20', true)
        die_group = model.active_entities.add_group()
        die_mesh = die_group.entities()

        # Specify all the points making up the vertices of the shape.
        t000 = Geom::Point3d.new(-1, -1, -1)
        t001 = Geom::Point3d.new(-1, -1,  1)
        t010 = Geom::Point3d.new(-1,  1, -1)
        t100 = Geom::Point3d.new( 1, -1, -1)
        t011 = Geom::Point3d.new(-1,  1,  1)
        t101 = Geom::Point3d.new( 1, -1,  1)
        t110 = Geom::Point3d.new( 1,  1, -1)
        t111 = Geom::Point3d.new( 1,  1,  1)
        1pp = Geom::Point3d.new(    0,  $IPH,  $PHI)
        1pn = Geom::Point3d.new(    0,  $IPH, -$PHI)
        1np = Geom::Point3d.new(    0, -$IPH,  $PHI)
        1nn = Geom::Point3d.new(    0, -$IPH, -$PHI)
        2pp = Geom::Point3d.new( $IPH,  $PHI,     0)
        2pn = Geom::Point3d.new( $IPH, -$PHI,     0)
        2np = Geom::Point3d.new(-$IPH,  $PHI,     0)
        2nn = Geom::Point3d.new(-$IPH, -$PHI,     0)
        3pp = Geom::Point3d.new( $PHI,     0,  $IPH)
        3pn = Geom::Point3d.new(-$PHI,     0,  $IPH)
        3np = Geom::Point3d.new( $PHI,     0, -$IPH)
        3nn = Geom::Point3d.new(-$PHI,     0, -$IPH)

        # Create all the faces of the die.
        TODO

        # Create the numbers to emboss on each face.
        numbers_group = model.active_entities.add_group()
        counter = 0
        maxCount = 20
        die_mesh.each_with_index do |face, index|
            if face.is_a? Sketchup::Face
                number_group = numbers_group.entities().add_group()
                number_entities = number_group.entities()
                number_entities.add_3d_text((index + 1).to_s(), TextAlignCenter, $fontName, $isBold, $isItalic, $letterHeight)
                number_bounds = number_group.bounds()
                number_entities.transform_entities(getLetterPlanePlace(face, (number_bounds.width / 2) + $fontOffsets[index][0], (number_bounds.height / 2) + $fontOffsets[index][1], 0), number_entities.to_a())
                counter += 1
                if counter == maxCount
                    break
                end
            end
        end

        ...
    end
end

# The first vertex on a face MUST be immediately to the left of the top vector of the text.
def create_d6
    p000 = Geom::Point3d.new((-0.5 * scale), (-0.5 * scale), (-0.5 * scale))
    p001 = Geom::Point3d.new((-0.5 * scale), (-0.5 * scale), ( 0.5 * scale))
    p010 = Geom::Point3d.new((-0.5 * scale), ( 0.5 * scale), (-0.5 * scale))
    p100 = Geom::Point3d.new(( 0.5 * scale), (-0.5 * scale), (-0.5 * scale))
    p011 = Geom::Point3d.new((-0.5 * scale), ( 0.5 * scale), ( 0.5 * scale))
    p101 = Geom::Point3d.new(( 0.5 * scale), (-0.5 * scale), ( 0.5 * scale))
    p110 = Geom::Point3d.new(( 0.5 * scale), ( 0.5 * scale), (-0.5 * scale))
    p111 = Geom::Point3d.new(( 0.5 * scale), ( 0.5 * scale), ( 0.5 * scale))

    f1 = d6_mesh.add_face([p011, p111, p110, p010])
    f2 = d6_mesh.add_face([p010, p110, p100, p000])
    f3 = d6_mesh.add_face([p011, p010, p000, p001])
    f4 = d6_mesh.add_face([p110, p111, p101, p100])
    f5 = d6_mesh.add_face([p111, p011, p001, p101])
    f6 = d6_mesh.add_face([p000, p100, p101, p001])

    tempNumberGroup = model.active_entities.add_group()
    faceCount = d6_mesh.length()
    counter = 1
    d6_mesh.first(faceCount).each do |face|
        if face.is_a? Sketchup::Face
            numberGroup = tempNumberGroup.entities.add_group()
            numberEntities = numberGroup.entities()
            numberEntities.add_3d_text(counter.to_s, TextAlignCenter, fontName, isBold, isItalic, letterHeight)
            numberBounds = numberGroup.bounds()
            numberEntities.transform_entities(getLetterPlanePlace(face, (numberBounds.width / 2) + fontOffsets[counter-1][0], (numberBounds.height / 2) + fontOffsets[counter-1][1], 0), numberEntities.to_a)
            counter += 1
        end
    end

end







# ===== TODO =====
# Try to figure out why there's still coupling of definition edits?
# Make a class for SystemFont again!
# We need to make D4's work correctly still...
# And set the angle offsets for D% and D10 correctly.
# And also program D10 and D12 models in too...