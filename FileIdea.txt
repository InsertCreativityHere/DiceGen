# This class defines the mesh model for a sharp-edged standard D8 die (an equilateral octahedron).
# By default this model has a size of 15mm, and a font size of 7mm.
class Octahedron < DieModel
    # Lays out the geometry for the die in a new ComponentDefinition and adds it to the main DefinitionList.
    #   def_name: The name of this definition. Every ComponentDefinition can be referenced with a unique name that
    #             is computed by appending this value to the name of the die model (separated by an underscore).
    def initialize(def_name:)
        # Create a new definition for the die.
        definition = $MAIN_MODEL.definitions.add("#{self.class.name}_#{def_name}")
        mesh = definition.entities()

        c0 = 0.0
        c1 = Math.sqrt(2.0) / 2.0
        # Define all the points that make up the vertices of the die.
        v0 = Geom::Point3d::new( c1,  c0,  c0)
        v1 = Geom::Point3d::new(-c1,  c0,  c0)
        v2 = Geom::Point3d::new( c0,  c1,  c0)
        v3 = Geom::Point3d::new( c0, -c1,  c0)
        v4 = Geom::Point3d::new( c0,  c0,  c1)
        v5 = Geom::Point3d::new( c0,  c0, -c1)

        # Create the faces of the die by joining the vertices with edges. #TODO FIX THIS
        faces = Array::new(8)
        faces[0] = mesh.add_face([v4, v0, v2])
        faces[1] = mesh.add_face([v4, v2, v1])
        faces[2] = mesh.add_face([v4, v1, v3])
        faces[3] = mesh.add_face([v4, v3, v0])
        faces[4] = mesh.add_face([v5, v0, v3])
        faces[5] = mesh.add_face([v5, v3, v1])
        faces[6] = mesh.add_face([v5, v1, v2])
        faces[7] = mesh.add_face([v5, v2, v0])

        # The distance between two diametric faces is 0.816497 in the base model, and standard D8 dice have a
        # diametric distance of 15mm, so the model must be scaled by a factor of
        # 15mm / (0.816497)(25.4mm/) = 0.723274
        # Which is further scaled by 1000, since we treat mm as m in the model, to get 723.274
        super(die_size: 15.0, die_scale: 723.274, font_size: 7.0, definition: definition, faces: faces)

        # Add the additional glyph mappings supported by this model.
        a0 = 0.0; a1 = 120.0; a2 = 240;
        @glyph_mappings["chessex"]   = [[1, 7, 5, 3, 2, 8, 6, 4], [a1] * 8]
        @glyph_mappings["rybonator"] = [[1, 3, 5, 7, 6, 8, 2, 4], [a1] * 8]
    end

    # An octahedron with standard dimensions.
    STANDARD = Octahedron::new(def_name: "Standard")

end

end
end
end







{
    "name": "Octahedron",
    "description": "A standard D8. An 8 sided platonic polyhedron made of equalateral triangles.",
    "type": "FACE",

    "scale": "$die_size / (0.816497 * 25.4)",

    "variables": {
        "die_size": 15.0
    },

    "constants": {
        "1": 0.0,
        "2": "root2(2.0) / 2.0"
    },

    "vertices": {
        "1": [ 2,  1,  1],
        "2": [-2,  1,  1],
        "3": [ 1,  2,  1],
        "4": [ 1, -2,  1],
        "5": [ 1,  1,  2],
        "6": [ 1,  1, -2]
    },

    "faces": {
        "1": [5, 1, 3],
        "2": [5, 3, 2],
        "3": [5, 2, 4],
        "4": [5, 4, 1],
        "5": [6, 1, 4],
        "6": [6, 4, 2],
        "7": [6, 2, 3],
        "8": [6, 3, 1]
    },

    "vertex_roundovers": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0
    },

    "face_roundovers": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0
    },

    "glyph_indices": {
        "1": 1,
        "2": 2,
        "3": 3,
        "4": 4,
        "5": 5,
        "6": 6,
        "7": 7,
        "8": 8
    },

    "default_font_height": 7.0,
    "parent": null
}
